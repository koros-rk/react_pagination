{"version":3,"sources":["utils.ts","App.tsx","components/Pagination/Pagination.tsx","utils/Pagination.ts","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","DEFAULT","Pagination","_ref","pagesCount","selectedPage","selectPage","_jsxs","className","children","_jsx","classNames","disabled","href","onClick","map","item","active","concat","GenericPagination","items","itemsPerPage","_classCallCheck","pages","pageCount","this","Math","ceil","length","reduce","acc","collection","_createClass","key","value","index","App","_useState","useState","_useState2","_slicedToArray","setItemsPerPage","_useState3","page","_useState4","currentPage","setCurrentPage","preparedItems","PaginationConstructor","start","end","min","getTitle","id","defaultValue","onChange","event","target","htmlFor","getPagesCount","getPage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9088d8fe.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\nimport PaginationConstructor from './utils/Pagination';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nenum DEFAULT {\n  pageCount = 5,\n  page = 1,\n}\n\nexport const App: React.FC = () => {\n  const [itemsPerPage, setItemsPerPage] = useState(DEFAULT.pageCount);\n  const [currentPage, setCurrentPage] = useState(DEFAULT.page);\n\n  const preparedItems\n    = new PaginationConstructor<typeof items[0]>(items, itemsPerPage);\n\n  const getTitle = () => {\n    const start = (currentPage - 1) * itemsPerPage + 1;\n    const end = Math.min((\n      currentPage - 1) * itemsPerPage + itemsPerPage,\n    items.length);\n\n    return `Page ${currentPage} (items ${start} - ${end} of ${items.length})`;\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {getTitle()}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            defaultValue={DEFAULT.pageCount}\n            onChange={event => {\n              setCurrentPage(DEFAULT.page);\n              setItemsPerPage(+event.target.value);\n            }}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        pagesCount={preparedItems.getPagesCount()}\n        selectedPage={currentPage}\n        selectPage={(value) => {\n          setCurrentPage(value);\n        }}\n      />\n\n      <ul>\n        {\n          preparedItems.getPage(currentPage - 1)\n            .map((item) => (\n              <li data-cy=\"item\" key={item}>{item}</li>\n            ))\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ninterface Props {\n  pagesCount: number\n  selectedPage: number\n  selectPage: (pageNumber: number) => void\n}\n\nexport const Pagination: React.FC<Props> = ({\n  pagesCount,\n  selectedPage,\n  selectPage,\n}) => {\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames('page-item', {\n        disabled: selectedPage === 1,\n      })}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={selectedPage === 1}\n          onClick={() => {\n            if (selectedPage !== 1) {\n              selectPage(selectedPage - 1);\n            }\n          }}\n        >\n          «\n        </a>\n      </li>\n\n      {\n        getNumbers(1, pagesCount)\n          .map(item => (\n            <li\n              key={item}\n              className={classNames('page-item', {\n                active: item === selectedPage,\n              })}\n            >\n              <a\n                data-cy=\"pageLink\"\n                className=\"page-link\"\n                href={`#${item}`}\n                onClick={() => {\n                  selectPage(item);\n                }}\n              >\n                {item}\n              </a>\n            </li>\n          ))\n      }\n\n      <li className={classNames('page-item', {\n        disabled: selectedPage === pagesCount,\n      })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={selectedPage === pagesCount}\n          onClick={() => {\n            if (selectedPage !== pagesCount) {\n              selectPage(selectedPage + 1);\n            }\n          }}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","export default class GenericPagination<T> {\n  pages: T[][];\n\n  pageCount: number;\n\n  constructor(\n    items: T[],\n    public itemsPerPage: number,\n  ) {\n    this.pageCount = Math.ceil(items.length / itemsPerPage);\n    this.pages = items.reduce((acc: T[][], item) => {\n      const collection = acc;\n\n      if (collection[collection.length - 1].length === itemsPerPage) {\n        collection.push([]);\n      }\n\n      collection[collection.length - 1].push(item);\n\n      return collection;\n    }, [[]]);\n  }\n\n  getPage(index: number) {\n    return this.pages[index];\n  }\n\n  getPagesCount() {\n    return this.pageCount;\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}